CALL WSETCONTENTTYPE("application/json")

CALL WSETHEADER("Access-Control-Allow-Origin","*")

* Get our request_method 

CALL WGETHEADER(REQUEST.METHOD,"REQUEST_METHOD")

* Special code for CORS.  If cors kicks and a OPTION request is sent by the browser the
* following code will make this work.  This is a development only item.  For production
* you want to read the CORS documents.

IF REQUEST.METHOD = "OPTIONS" THEN
	CALL WSETHEADER("Access-Control-Headers"		,"Content-Type, Authentication"				)
	CALL WSETHEADER("Access-Control-Allow-Headers"	,"Content-Type, Authentication, Cookies"	)
	CALL WSETHEADER("Access-Control-Allow-Methods"	,"GET,PUT,POST,DELETE"						)
	CALL WSEND("")
	STOP
END

* Build a blank response object to send back

CALL WOBJ(RESPONSE.OBJ,"FROMSTRING","","{}","",RERR)

* Set our default response status and status message

JSON.STATUS="ok"
JSON.STATUS.MESSAGE=""

OPEN "NW.ORDERS" TO FILE ELSE
    JSON.STATUS="error"
    JSON.STATUS.MSG="Could not open NW.ORDERS file"
    GOTO end.of.call
END

OPEN "DICT","NW.ORDERS" TO DICT.FILE ELSE
    JSON.STATUS="error"
    JSON.STATUS.MSG="Could not open dict NW.ORDERS"
    GOTO end.of.call
END

CALL WOBJ(RESPONSE.OBJ,"SET.ARRAY","records","[]","",RERR)

* Get param from url bar in case user is requesting a get or delete

CALL WGETPARAM(ID,1)

* Default our results.cntr variable to zero. We use this if we send multiple
* records back

RESULTS.CNTR=0

* Set some debug information in our response object.  This is purely for testing
* This will be a subobject called debug inside our response

* This is our router.  We look at the request_method and ID to determine action

IF REQUEST.METHOD = "" THEN REQUEST.METHOD="GET"

BEGIN CASE
	CASE REQUEST.METHOD="GET" AND ID = ""
	    * Get all ids. 
		GOSUB get.all.records

	CASE REQUEST.METHOD="GET" AND ID # ""
		* Get only one id.  Uses same as get all but returns only one record in ARRAY
		GOSUB get.one.record
		IF NO.RECORD THEN
			JSON.STATUS="error"
			JSON.STATUS.MESSAGE="Could not find ":ID
		END

	CASE REQUEST.METHOD="PUT" AND ID # ""
		* Update a existing record.
		GOSUB update.record

	CASE REQUEST.METHOD="DELETE" AND ID # ""
		* Delete a record
		GOSUB delete.record

	CASE REQUEST.METHOD="POST" AND ID # ""
		* Adds a new record.  Assigns a ID
		READU NEXT.ID FROM DICT.FILE, "NEXT.ID" ELSE NEXT.ID = "100"
		NEXT.ID+=1
		WRITE NEXT.ID ON DICT.FILE, "NEXT.ID"
		ID = NEXT.ID
		GOSUB update.record

	CASE 1
		* Invalid action
		JSON.STATUS="error"
		JSON.STATUS.MESSAGE="Invalid action REQUEST.METHOD=":REQUEST.METHOD

END CASE

end.of.call: *

* Builds our response status items and builds response json

CALL WOBJ(RESPONSE.OBJ,"SET.STRING","status",JSON.STATUS,"",RERR)
CALL WOBJ(RESPONSE.OBJ,"SET.STRING","statusmsg",JSON.STATUS.MESSAGE,"",RERR)
CALL WOBJ(RESPONSE.OBJ,"TOSTRING","",RESPONSE.JSON,"PRETTIFY",RERR)

CALL WSEND(RESPONSE.JSON)

STOP; * end of main program



**********************************
get.one.record: *
**********************************

NO.RECORD=0

READ RECORD FROM FILE, ID ELSE
	NO.RECORD=1
	RETURN
END

* Build our object inside the results array. To keep us from having to type the entire
* string every time we build the common part here in PRE

CALL WOBJ(ORDER.OBJ,"FROMSTRING","","{}","",RERR)

CALL WOBJ(ORDER.OBJ,"SET"                 ,"orderid"                 ,ID                           ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"                 ,"customerid"              ,RECORD<1>                     ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"                 ,"employeeid"              ,RECORD<2>                     ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"                 ,"orderdate"               ,OCONV(RECORD<3>,"D4-")        ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"                 ,"requiredate"             ,OCONV(RECORD<4>,"D4-")        ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"                 ,"shippeddate"             ,OCONV(RECORD<5>,"D4-")        ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"				  ,"shipstreet" 			 ,RECORD<6,1>                   ,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"				  ,"shipcity"				 ,RECORD<6,2>					,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"				  ,"shipregion"				 ,RECORD<6,3>					,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"				  ,"shippostalcode"			 ,RECORD<6,4>					,"",RERR)
CALL WOBJ(ORDER.OBJ,"SET"				  ,"shipcountry"			 ,RECORD<6,5>					,"",RERR)

NUMBER.ITEMS=DCOUNT(RECORD<10>,@VM)

CALL WOBJ(ORDER.OBJ,"SET.ARRAY"           ,"items"                   ,"[]"                           ,"",RERR)

FOR V=1 TO NUMBER.ITEMS
    CALL WOBJ(ITEMS.OBJ,"FROMSTRING"      ,""                        ,"{}"                         ,"",RERR)
    CALL WOBJ(ITEMS.OBJ,"SET"             ,"productid"        ,RECORD<10,V>                              ,"",RERR)
    CALL WOBJ(ITEMS.OBJ,"SET"             ,"productdesc"      ,OCONV(RECORD<10,V>,"TNW.PRODUCTS;X;;10")  ,"",RERR)
    CALL WOBJ(ITEMS.OBJ,"SET.NUMBER"      ,"unitprice"        ,OCONV(RECORD<11,V>,"MD2")                 ,"",RERR)
    CALL WOBJ(ITEMS.OBJ,"SET.NUMBER"      ,"quantity"         ,RECORD<12,V>                              ,"",RERR)
    CALL WOBJ(ITEMS.OBJ,"SET.NUMBER"      ,"discount"         ,OCONV(RECORD<13,V>,"MD2")                 ,"",RERR)
        
    CALL WOBJ(ITEMS.OBJ,"TOSTRING"        ,""                        ,ITEMS.JSON                   ,"",RERR)
    CALL WOBJ(ORDER.OBJ,"SET.OBJECT"      ,"items[-1]"               ,ITEMS.JSON                   ,"",RERR)
NEXT V

CALL WOBJ(ORDER.OBJ,"TOSTRING","",ORDER.JSON,"",RERR)
CALL WOBJ(RESPONSE.OBJ,"SET.OBJECT","records[-1]",ORDER.JSON,"",RERR)

RETURN



*******************************
get.all.records: *
*******************************

* Do our select, get our list of IDS and for each record call the get.all.todo

EXECUTE "SSELECT NW.ORDERS BY-DSND ORDERDATE"
LIMIT=50
LIMIT.CNTR=0

LOOP
	READNEXT ID ELSE EXIT
    LIMIT.CNTR+=1
    IF LIMIT.CNTR > LIMIT THEN
        CLEARSELECT
        RETURN
    END

	GOSUB get.one.record
*	DEBUG
REPEAT
RETURN



*******************************
update.record: *
*******************************

NO.RECORD=0
READ RECORD FROM FILE, ID ELSE NO.RECORD=1

* We are showing pure rest with a seperate function for adding a record
* vs updating.  Normally in Pick we do not do this but this demonstrates
* how it could be done. 

BEGIN CASE
	CASE REQUEST.METHOD="PUT" AND NO.RECORD
		JSON.STATUS="error"
		JSON.STATUS.MESSAGE="No record to update (put action)"
		RETURN
	CASE REQUEST.METHOD="POST" AND NOT(NO.RECORD)
		JSON.STATUS="error"
		JSON.STATUS.MESSAGE="Trying to write a new record (":ID:") but it already exists!"
		RETURN
END CASE

* Get the submitted json

CALL WGETBODY(BODY)

* Convert to a object and pull our data

CALL WOBJ(BODYOBJ,"FROMSTRING"	,""			,BODY 			,"",RERR)
CALL WOBJ(BODYOBJ,"GET"                 ,"orderid"                 ,ID              ,"",RERR)
CALL WOBJ(BODYOBJ,"GET"                 ,"customerid"              ,CUSTOMERID      ,"",RERR)
CALL WOBJ(BODYOBJ,"GET"                 ,"employeeid"              ,EMPLOYEEID      ,"",RERR)
CALL WOBJ(BODYOBJ,"GET"                 ,"orderdate"               ,ORDERDATE       ,"",RERR)
CALL WOBJ(BODYOBJ,"GET"                 ,"requiredate"             ,REQUIREDATE     ,"",RERR)
CALL WOBJ(BODYOBJ,"GET"                 ,"shippeddate"             ,SHIPPEDDATE     ,"",RERR)

* Set our data into a pick record.  Here we could do business appliction work and abort
* a update with a error

RECORD<1>=CUSTOMERID
RECORD<2>=EMPLOYEEID
RECORD<3>=ICONV(ORDERDATE,"D")
RECORD<4>=ICONV(REQUIREDATE,"D")
RECORD<5>=ICONV(SHIPPEDDATE,"D")

CALL WOBJ(BODYOBJ,"LENGTH"              ,"items"                   ,NUMBER.ITEMS    ,"",RERR)


FOR I=1 TO NUMBER.ITEMS
    PRE="items[":I-1:"]"
    CALL WOBJ(BODYOBJ,"GET",PRE:".productid",        PRODUCTID,          "",RERR)
    CALL WOBJ(BODYOBJ,"GET",PRE:".unitprice",        UNITPRICE,          "",RERR)
    CALL WOBJ(BODYOBJ,"GET",PRE:".discount",         DISCOUNT,           "",RERR)
    CALL WOBJ(BODYOBJ,"GET",PRE:".quantity",         QUANTITY,           "",RERR)

    RECORD<10,I>=PRODUCTID
    RECORD<11,I>=ICONV(UNITPRICE,"MD2")
    RECORD<12,I>=QUANTITY
    RECORD<13,I>=ICONV(DISCOUNT,"MD2")


NEXT I

WRITE RECORD ON FILE, ID

JSON.STATUS.MESSAGE = "Saved ":ID

RETURN



******************************
delete.record: *
******************************

DELETE FILE, ID

JSON.STATUS.MESSAGE="Deleted ":ID

RETURN



